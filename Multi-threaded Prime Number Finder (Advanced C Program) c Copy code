#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <math.h>

#define MAX 1000000  // Maximum range limit

// Structure to hold thread data
typedef struct {
    int start;
    int end;
    int *primes;
} ThreadData;

// Function to check if a number is prime
int is_prime(int n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;
    if (n % 2 == 0 || n % 3 == 0) return 0;
    for (int i = 5; i <= sqrt(n); i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return 0;
    }
    return 1;
}

// Thread function to find primes in a given range
void *find_primes(void *arg) {
    ThreadData *data = (ThreadData *) arg;
    for (int i = data->start; i <= data->end; i++) {
        if (is_prime(i)) {
            data->primes[i - data->start] = i;
        } else {
            data->primes[i - data->start] = 0;
        }
    }
    pthread_exit(NULL);
}

int main() {
    int num_threads, range_start, range_end;

    // Input: Range and number of threads
    printf("Enter start of range: ");
    scanf("%d", &range_start);
    printf("Enter end of range: ");
    scanf("%d", &range_end);
    printf("Enter number of threads: ");
    scanf("%d", &num_threads);

    // Create threads
    pthread_t threads[num_threads];
    ThreadData thread_data[num_threads];
    int range_per_thread = (range_end - range_start + 1) / num_threads;

    for (int i = 0; i < num_threads; i++) {
        thread_data[i].start = range_start + i * range_per_thread;
        thread_data[i].end = (i == num_threads - 1) ? range_end : thread_data[i].start + range_per_thread - 1;
        thread_data[i].primes = malloc((thread_data[i].end - thread_data[i].start + 1) * sizeof(int));
        pthread_create(&threads[i], NULL, find_primes, &thread_data[i]);
    }

    // Join threads
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    // Output results
    printf("Prime numbers in the range %d to %d are:\n", range_start, range_end);
    for (int i = 0; i < num_threads; i++) {
        for (int j = 0; j <= thread_data[i].end - thread_data[i].start; j++) {
            if (thread_data[i].primes[j] != 0) {
                printf("%d ", thread_data[i].primes[j]);
            }
        }
        free(thread_data[i].primes);
    }

    printf("\n");
    return 0;
}
